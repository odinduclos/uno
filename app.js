var express=require("express"),app=express(),http=require("http").Server(app),io=require("socket.io")(http);app.use(express.static("public")),app.use(express.static("node_modules")),app.get("/",function(a,b){b.sendfile("index.html")});var Deck=require("./server/deck.js"),Player=require("./server/player.js"),Game=require("./server/game.js"),games={};io.on("connection",function(a){console.log("connection",a.client.id);var b=new Player(a.client.id),c=!1;console.log("updateRooms",games),a.emit("updateRooms",games),a.on("createRoom",function(d){console.log("createRoom",d),games[d.room]=new Game(d.name||d.room,new Deck,b),c=games[d.room],""!=d.name&&(b.name=d.name),b.room=d.room,a.join("room-"+a.client.id),b.addCards(c.deck.draw(7)),console.log("HAND",b.cards),a.emit("displayError",{error:200,message:"You are "+b.name+"."}),console.log("updateRooms",games),io.emit("updateRooms",games)}),a.on("joinRoom",function(d){console.log("joinRoom",d.room),c=games[d.room],c.addPlayer(b),""!=d.name&&(b.name=d.name),b.room=d.room,a.join("room-"+d.room),b.addCards(c.deck.draw(7)),a.emit("displayError",{error:200,message:"You are "+b.name+"."}),io.to("room-"+b.room).emit("displayError",{error:200,message:"Player "+b.name+"joined."})}),a.on("launchGame",function(){console.log("launchGame "+b.id,games[b.id]),io.to("room-"+b.room).emit("updateGame",c.addCard(c.deck.draw(1)[0])),a.emit("updateHand",b.cards),delete games[b.id]}),a.on("play",function(d){console.log("play",d);var e=d.position,f=d.color;if(b!=c.players[c.turn])return console.log("displayError "+a.client.id,"It is not your turn."),a.emit("displayError",{error:403,message:"It is not your turn."}),!1;if("undefined"==typeof b.cards[e])return console.log("displayError "+a.client.id,"This card is not in your hand."),a.emit("displayError",{error:403,message:"This card is not in your hand."}),!1;var g=b.cards[e];return"black"==g.color&&"undefined"==typeof f?(console.log("displayError "+a.client.id,"You have to choose a color."),a.emit("displayError",{error:403,message:"You have to choose a color."}),!1):"black"!=g.color&&g.color!=c.color&&g.number!==c.stack[c.stack.length-1].number?(console.log("displayError "+a.client.id,"You cannot play this card."),a.emit("displayError",{error:403,message:"You cannot play this card."}),!1):0==b.removeCard(e).length?(console.log("endGame "+a.client.id,b),io.to("room-"+b.room).emit("endGame",b),!1):(c.addCard(g),io.to("room-"+b.room).emit("updateGame",g),io.to("room-"+b.room).emit("displayError",{error:200,message:"Player "+b.name+" played a "+g.color+" "+g.number+"."}),"black"==g.color&&(io.to("room-"+b.room).emit("displayError",{error:200,message:"Player "+b.name+" chose "+f+"."}),c.color=f),"skip"==g.function&&c.nextTurn(),"reverse"==g.function&&(c.reverse=!c.reverse),c.nextTurn(),"draw2"==g.function&&c.players[c.turn].addCards(c.deck.draw(2)),"draw4"==g.function&&c.players[c.turn].addCards(c.deck.draw(4)),1==b.cards.length&&(console.log("UNOOOOOOOOOO"),io.to("room-"+b.room).emit("displayError",{error:418,message:"Player "+b.name+" say UNO!"})),a.emit("updateHand",b.cards),io.to("/#"+c.players[c.turn].id).emit("updateHand",c.players[c.turn].cards),void io.to("/#"+c.players[c.turn].id).emit("displayError",{error:200,message:"It is your turn."}))}),a.on("draw",function(){return b!=c.players[c.turn]?(a.emit("displayError",{error:403,message:"It is not your turn."}),!1):(b.addCards(c.deck.draw(1)),a.emit("updateHand",b.cards),c.nextTurn(),io.to("room-"+b.room).emit("displayError",{error:200,message:"Player "+b.name+" draw a card."}),void io.to("/#"+c.players[c.turn].id).emit("displayError",{error:200,message:"It is your turn."}))}),a.on("disconnect",function(){io.to("room-"+b.room).emit("endGame"),c&&(c.removePlayer(b),console.log("removePlayer",b),io.to("room-"+b.room).emit("updateRooms",games),console.log("delete game",c),delete c,console.log("delete game[player.room]",games[b.room]),delete games[b.room],console.log("delete player",b),delete b),io.emit("updateRooms",games)})}),http.listen(5500,function(){console.log("listening on *:5500")});